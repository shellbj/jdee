<?xml version="1.0" encoding="UTF-8" ?>

<project name="jdee" default="build">
  <!-- ** properties start ** -->


  <!-- configuration directory -->
  <property name="config.dir" location="./config"/>

  <!-- source code -->
  <property name="src.lisp.dir" location="./lisp"/>
  <property name="src.java.dir" location="./java/src"/>

  <!-- third party libraries -->
  <property name="lib.java.dir" location="./java/lib"/>

  <!-- create objects -->
  <property name="build.dir" location="./build"/>

  <property name="build.config.dir" location="${build.dir}/config"/>
  <property name="config.build.file"
	    location="${build.config.dir}/config.properties"/>

  <property name="build.lisp.dir" location="${build.dir}/lisp"/>
  <property name="build.lisp.src.file" location="${config.dir}/build.el"/>
  <property name="build.lisp.dst.file" location="${build.config.dir}/build.el"/>
  <!-- for now, changes to this need to be reflected in the `require' in jde.el -->
  <property name="build.lisp.autoload.libname" location="${build.lisp.dir}/jde-autoload"/>

  <property name="build.java.dir" location="${build.dir}/classes"/>

  <property name="build.bin.emacs" value="emacs"/>

  <!-- staging  -->
  <property name="dist.dir" location="./dist"/>

  <path id="compile.classpath">
    <fileset dir="${lib.java.dir}"/>
  </path>

  <!-- ** properties end ** -->



  <target name="init">
    <tstamp/>
    <uptodate property="config.uptodate" srcfile="${config.build.file}"
	      targetfile="${config.build.file}"/>
    <mkdir dir="${build.dir}"/>
  </target>


  <target name="init-compile" depends="init">
    <property file="${config.build.file}"/>
  </target>


  <!-- determine whether or not we need to compile emacs lisp/autoload files -->
  <target name="prepare-lisp-build">
    <mkdir dir="${build.lisp.dir}"/>

    <condition property="lisp.uptodate">
      <and>
	<available file="${build.lisp.autoload.libname}.el"/>
	<uptodate>
	  <srcfiles dir="${build.lisp.dir}" includes="*.el"/>
	  <mapper type="glob" from="*.el" to="*.elc"/>
	</uptodate>
      </and>
    </condition>
    <echo message="AFT: ${lisp.uptodate}"/>
  </target>


  <target name="configure" depends="init,prepare-lisp-build" unless="config.uptodate">
    <mkdir dir="${build.config.dir}"/>

    <!-- developers will usually have the following config file (i.e. source
	 installed libs) -->
    <property file="${user.home}/.jdee-config.properties"/>

    <!-- project specific defaults (not user or instance specific) -->
    <property file="${config.dir}/default.properties"/>

    <propertyfile file="${config.build.file}"
		  comment="user editable build configuration parameters">
      <entry key="config.time" type="date" value="now"/>
      <entry key="cedet.dir" value="${cedet.dir}"/>
      <entry key="elib.dir" value="${elib.dir}"/>
      <entry key="prefix.dir" value="${prefix.dir}"/>
    </propertyfile>
  </target>


  <!-- configure (create/build) the emacs lisp build configuration files -->
  <target name="configure-ebuild" depends="configure,init-compile" unless="lisp.uptodate">
    <!-- copy the lisp to the build directory -->
    <copy todir="${build.lisp.dir}">
      <fileset dir="${src.lisp.dir}" includes="*.el"/>
    </copy>

    <!-- create the file used to compile the emacs lisp code -->
    <copy file="${build.lisp.src.file}" tofile="${build.lisp.dst.file}"/>
    <replace file="${build.lisp.dst.file}">
      <replacefilter token="@{cedet.dir}" value="${cedet.dir}"/>
      <replacefilter token="@{src.lisp.dir}" value="${src.lisp.dir}"/>
      <replacefilter token="@{build.lisp.dir}" value="${build.lisp.dir}"/>
      <replacefilter token="@{build.lisp.autoload.libname}" value="${build.lisp.autoload.libname}"/>
    </replace>
  </target>


  <target name="build-lisp" depends="configure-ebuild" unless="lisp.uptodate"
	  description="compile the JDEE Emacs lisp code">
    <!-- invoke Emacs in batch mode to creat autoloads and compile emacs
         lisp -->
    <exec dir="${build.lisp.dir}" executable="${build.bin.emacs}">
      <arg value="--script"/>
      <arg value="${build.lisp.dst.file}"/>
    </exec>
  </target>


  <target name="build-java" depends="init-compile"
	  description="compile the JDEE Java source code">
    <mkdir dir="${build.java.dir}"/>
    <javac srcdir="${src.java.dir}" destdir="${build.java.dir}"
	   classpathref="compile.classpath"/>
  </target>


  <target name="build" depends="build-lisp, build-java"
	  description="compile all JDEE source code"/>


  <target name="dist" depends="build">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${build.lisp.dir}"/>
    </copy>
  </target>


  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="${config.build.file}"/>
  </target>

  <target name="cleanall" depends="clean">
  </target>

</project>
